name: release

on:
  push:
    branches:
      - "release/**"
    # tags:
    #   - "v*"

jobs:
  build:
    name: Build ${{ matrix.target }} on ${{ matrix.os }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            build_command: nix build .#timr
            binary_name: timr-tui
            asset_name: timr-tui-linux-x86_64 # `x86_64` by default
          - os: ubuntu-latest
            target: windows
            build_command: nix build .#windows
            binary_name: timr-tui.exe
            asset_name: timr-tui-windows-x86_64 # target 'x86_64-pc-windows-gnu' defined via `CARGO_BUILD_TARGET` in flake.nix
          - os: macOS-latest
            target: macos
            build_command: nix build .#timr
            binary_name: timr-tui
            asset_name: timr-tui-macos-x86_64 # `x86_64` by default
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install zip (Ubuntu only)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y zip

      - name: Build project
        run: ${{ matrix.build_command }}

      - name: Get version from binary
        id: get_version
        run: |
          VERSION=$(result/bin/${{ matrix.binary_name }} -V | cut -d ' ' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare artifact
        run: |
          mkdir artifacts
          cp result/bin/${{ matrix.binary_name }} "artifacts/${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}"
          cd artifacts
          zip "${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}.zip" "${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}"
          path: "artifacts/${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}.zip"

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create draft release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: "v${{ needs.build.outputs.version }}"
          name: "Release v${{ needs.build.outputs.version }}"
          body: Draft release generated by CI.
          files: artifacts/**/*.zip
